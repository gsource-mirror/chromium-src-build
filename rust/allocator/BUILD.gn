# Copyright 2025 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/rust.gni")
import("//build/rust/rust_static_library.gni")

rust_allocator_uses_partition_alloc = false
if (build_with_chromium) {
  import("//base/allocator/partition_allocator/partition_alloc.gni")
  rust_allocator_uses_partition_alloc = use_partition_alloc_as_malloc
}

use_cpp_allocator_impls =
    rust_allocator_uses_partition_alloc || (is_win && is_asan)

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    "RUST_ALLOCATOR_USES_PARTITION_ALLOC=$rust_allocator_uses_partition_alloc",
  ]
  visibility = [ ":*" ]
}

if (toolchain_has_rust) {
  # All targets which depend on Rust code but are not linked by rustc must
  # depend on this. Usually, this dependency will come from the rust_target() GN
  # template. However, cargo_crate() does *not* include this dependency so any
  # C++ targets which directly depend on a cargo_crate() must depend on this.
  rust_static_library("allocator") {
    sources = [ "lib.rs" ]
    crate_root = "lib.rs"
    cxx_bindings = [ "lib.rs" ]
    rustflags = [
      "--cfg",
      "mangle_alloc_error_handler",
    ]

    deps = [ ":allocator_impls" ]

    no_chromium_prelude = true
    no_allocator_crate = true
    allow_unsafe = true

    if (use_cpp_allocator_impls) {
      rustflags += [
        "--cfg",
        "use_cpp_allocator_impls",
      ]
    }

    configs -= [ "//build/config/compiler:disallow_unstable_features" ]
  }

  # TODO(crbug.com/408221149): don't build this when `use_cpp_allocator_impls`
  # is false.
  static_library("allocator_impls") {
    public_deps = []
    if (rust_allocator_uses_partition_alloc) {
      public_deps += [ "//base/allocator/partition_allocator:partition_alloc" ]
    }

    sources = [
      # `alias.*`, `compiler_specific.h`, and `immediate_crash.*` have been
      # copied from `//base`.
      # TODO(crbug.com/40279749): Avoid duplication / reuse code.
      "alias.cc",
      "alias.h",
      "allocator_impls.cc",
      "allocator_impls.h",
      "compiler_specific.h",
      "immediate_crash.h",
    ]

    deps = [ ":buildflags" ]

    visibility = [ ":*" ]
  }
}
