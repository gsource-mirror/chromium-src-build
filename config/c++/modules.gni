# Copyright 2025 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")

if (is_ios) {
  import("//build/config/ios/ios_sdk.gni")
  sdk_path = ios_sdk_path
}

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
  sdk_path = mac_sdk_path
}

declare_args() {
  # It's a nontrivial switch, with differing APIs, so it's somewhat difficult
  # to migrate over one platform at a time.
  # In general, this should be true unless we have specifically supported
  # a platform with manual modules and are in the process of migrating.
  # Eg. linux arm64 and windows were never supported with manual clang modules,
  # so they should use_autogenerated_modules = true despite not having
  # autogenerated modules because they're guarded by use_clang_modules.
  use_autogenerated_modules =
      current_os != "android" && current_os != "mac" && current_os != "ios"
}

module_platform = ""
if (use_autogenerated_modules && use_clang_modules) {
  module_platform = "${current_os}-${current_cpu}"
  if (current_os == "chromeos") {
    # ChromeOS uses the linux sysroot.
    module_platform = "linux-${current_cpu}"
  }
} else if (use_clang_modules) {
  if (is_linux || is_chromeos) {
    sysroot_modulemap = "//build/linux/amd64/module.modulemap"
  } else if (is_apple) {
    sysroot_modulemaps = [
      "$sdk_path/usr/include/DarwinBasic.modulemap",
      "$sdk_path/usr/include/DarwinFoundation.modulemap",
      "$sdk_path/usr/include/c_standard_library.modulemap",
    ]
  } else if (is_android) {
    sysroot_modulemap = "//build/android/amd64/module.modulemap"
  }

  if (defined(sysroot_modulemap)) {
    sysroot_modulemaps = [ sysroot_modulemap ]
  }

  # Textual modules do not need to be precompiled.
  # However, like regular modules, they do need to include things.
  template("textual_module") {
    source_set(target_name) {
      forward_variables_from(invoker, [ "public_deps" ])
      use_libcxx_modules = false
    }
  }
}
