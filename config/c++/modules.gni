# Copyright 2025 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/apple/apple_sdk.gni")
import("//build/config/clang/clang.gni")

declare_args() {
  # Set to true when being run by build/modules/modularize.py
  running_modularize = false

  # It's a nontrivial switch, with differing APIs, so it's somewhat difficult
  # to migrate over one platform at a time.
  # In general, this should be true unless we have specifically supported
  # a platform with manual modules and are in the process of migrating.
  # Eg. linux arm64 and windows were never supported with manual clang modules,
  # so they should use_autogenerated_modules = true despite not having
  # autogenerated modules because they're guarded by use_clang_modules.
  use_autogenerated_modules = current_os != "mac" && current_os != "ios"
}

module_platform = "${current_os}-${current_cpu}"
if (is_chromeos) {
  # ChromeOS uses the linux sysroot.
  module_platform = "linux-${current_cpu}"
} else if (is_fuchsia || is_mac) {
  # Currently, these generate the same sysroot for all architectures. This is
  # not inherently the case. If we start getting errors on one architecture
  # but not the other, we will revert back to one modulemap per cpu.
  assert(
         # This *should* work for other cpu architectures. This assertion is
         # here so that the chrome build team is not caught unaware by a failure
         # on an architecture we didn't even know we were supporting.
         current_cpu == "x64" || current_cpu == "arm64",
         "Please inform the chrome build team that you received this error")
  module_platform = "${current_os}-x64"
}

if (clang_modules_platform_supported && use_autogenerated_modules) {
  chrome_build_file_bug = "https://g-issues.chromium.org/issues/new?cc=chrome-build-team@google.com&component=1456832&type=BUG&priority=P2&severity=S2&template=1959503"

  assert(
      path_exists("//build/modules/${module_platform}/BUILD.gn"),
      "Please file a bug at ${chrome_build_file_bug} containing your " +
          "args.gn, and mention that it failed on ${current_os}-${current_cpu}")
}

if (!use_autogenerated_modules && use_clang_modules) {
  sysroot_modulemaps = [ "$sdk_path/usr/include/DarwinBasic.modulemap" ]
  if (xcode_version_int >= 2600) {
    sysroot_modulemaps += [
      "$sdk_path/usr/include/DarwinFoundation1.modulemap",
      "$sdk_path/usr/include/DarwinFoundation2.modulemap",
      "$sdk_path/usr/include/DarwinFoundation3.modulemap",
    ]
  } else {
    sysroot_modulemaps += [
      "$sdk_path/usr/include/c_standard_library.modulemap",
      "$sdk_path/usr/include/DarwinFoundation.modulemap",
    ]
  }

  # Textual modules do not need to be precompiled.
  # However, like regular modules, they do need to include things.
  template("textual_module") {
    source_set(target_name) {
      forward_variables_from(invoker, [ "public_deps" ])
      use_libcxx_modules = false
    }
  }
}
